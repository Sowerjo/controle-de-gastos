// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts     Account[]
  categories   Category[]
  transactions Transaction[]
  goals        Goal[]

  @@map("users")
}

model Account {
  id        Int      @id @default(autoincrement())
  name      String
  balance   Decimal  @default(0)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  goals        Goal[]

  @@map("accounts")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  type      String   // 'income' or 'expense'
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  goals        Goal[]

  @@map("categories")
}

model Transaction {
  id          Int      @id @default(autoincrement())
  description String
  amount      Decimal
  type        String   // 'income' or 'expense'
  date        DateTime
  userId      Int      @map("user_id")
  accountId   Int      @map("account_id")
  categoryId  Int?     @map("category_id")
  paymentStatus String? @map("payment_status") // 'pendente', 'pago', 'atrasado'
  recurringRuleId Int? @map("recurring_rule_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model Goal {
  id          Int      @id @default(autoincrement())
  name        String
  targetValue Decimal  @map("target_value")
  currentValue Decimal @default(0) @map("current_value")
  targetDate  DateTime @map("target_date")
  userId      Int      @map("user_id")
  accountId   Int      @map("account_id")
  categoryId  Int?     @map("category_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("goals")
}